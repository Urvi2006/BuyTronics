const User = require('../models/User');
const jwt = require('jsonwebtoken');

// Generate JWT Token
const generateToken = (id) => {
    // Check if JWT_SECRET exists
    if (!process.env.JWT_SECRET) {
        console.error('❌ JWT_SECRET is not defined in environment variables');
        throw new Error('JWT configuration error');
    }
    
    console.log('🔑 Generating token for user ID:', id);
    return jwt.sign({ id }, process.env.JWT_SECRET, {
        expiresIn: '30d'
    });
};

// Register User
const registerUser = async (req, res) => {
    try {
        console.log('📝 Registration attempt:', req.body);
        
        const { name, email, password } = req.body;

        // Validate input
        if (!name || !email || !password) {
            console.log('❌ Missing fields');
            return res.status(400).json({ message: 'Please fill all fields' });
        }

        if (password.length < 6) {
            console.log('❌ Password too short');
            return res.status(400).json({ message: 'Password must be at least 6 characters' });
        }

        // Check if user exists
        const userExists = await User.findOne({ email });
        if (userExists) {
            console.log('❌ User already exists');
            return res.status(400).json({ message: 'User already exists' });
        }

        // Create user
        console.log('🔄 Creating user...');
        const user = await User.create({
            name,
            email,
            password
        });

        if (user) {
            console.log('✅ User created successfully:', user.email);
            
            // Generate token
            const token = generateToken(user._id);
            console.log('✅ Token generated successfully');
            
            res.status(201).json({
                _id: user._id,
                name: user.name,
                email: user.email,
                token: token
            });
        } else {
            console.log('❌ Failed to create user');
            res.status(400).json({ message: 'Invalid user data' });
        }

    } catch (error) {
        console.error('💥 Registration error:', error);
        
        // Handle JWT secret error specifically
        if (error.message === 'JWT configuration error') {
            return res.status(500).json({ 
                message: 'Server configuration error. Please contact support.',
                error: 'JWT_SECRET not configured'
            });
        }
        
        res.status(500).json({ 
            message: 'Server error',
            error: error.message
        });
    }
};

// Login User
const loginUser = async (req, res) => {
    try {
        console.log('🔐 Login attempt:', req.body.email);
        
        const { email, password } = req.body;

        // Check for user email
        const user = await User.findOne({ email });

        if (user && (await user.comparePassword(password))) {
            console.log('✅ Login successful:', email);
            
            // Generate token
            const token = generateToken(user._id);
            console.log('✅ Token generated successfully');
            
            res.json({
                _id: user._id,
                name: user.name,
                email: user.email,
                token: token
            });
        } else {
            console.log('❌ Invalid credentials:', email);
            res.status(401).json({ message: 'Invalid email or password' });
        }

    } catch (error) {
        console.error('💥 Login error:', error);
        
        if (error.message === 'JWT configuration error') {
            return res.status(500).json({ 
                message: 'Server configuration error. Please contact support.',
                error: 'JWT_SECRET not configured'
            });
        }
        
        res.status(500).json({ 
            message: 'Server error',
            error: error.message
        });
    }
};

module.exports = {
    registerUser,
    loginUser
};
